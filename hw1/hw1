{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Hangman!\n",
      "There are 3 sets of words shown below:\n",
      "\t1. dinos\n",
      "\t2. pontificate\n",
      "\t3. the posthuman\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "#я не очень большую часть этого кода писала сама, тут в основном просто все собрано со stackoverflow, вроде так можно\n",
    "def setup():\n",
    "    print(\"Welcome to Hangman!\")\n",
    "    print(\"There are 3 sets of words shown below:\")\n",
    "    print(\"\\t1. dinos\")\n",
    "    print(\"\\t2. pontificate\")\n",
    "    print(\"\\t3. the posthuman\")\n",
    "\n",
    "\n",
    "#выбор темы\n",
    "def theme_choice():\n",
    "    user_setting = input(\"Please choose a set of words by typing its number: \")\n",
    "    \n",
    "    if (str(user_setting) == \"1\"):\n",
    "        with open('dinos.txt', encoding='utf-8') as f:\n",
    "            word_list = f.read().splitlines()\n",
    "        print(\"\\nYou have chosen dinos and will receive 7 lives.\")  \n",
    "        \n",
    "    elif (str(user_setting) == \"2\"):\n",
    "        with open('pontificate.txt', encoding='utf-8') as f:\n",
    "            word_list = f.read().splitlines()\n",
    "        print(\"\\nYou have chosen pontificate and will receive 7 lives.\") \n",
    "        \n",
    "    elif (str(user_setting) == \"3\"):\n",
    "        with open('theposthuman.txt', encoding='utf-8') as f:\n",
    "            word_list = f.read().splitlines()\n",
    "        print(\"\\nYou have chosen theposthuman and will receive 7 lives.\") \n",
    "        \n",
    "#выбор рандомного слова\n",
    "    random_num = random.randint(0, len(word_list)-1)\n",
    "    guessWord = word_list[random_num]\n",
    "    return guessWord\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "def playing(theme_choice):\n",
    "    again = True \n",
    "    while again: #loop\n",
    "        repetitions = []\n",
    "        guessWord = theme_choice()\n",
    "        board = \"-\" * len(guessWord) #нижние подчеркивания вместо букв\n",
    "        alreadySaid = set()\n",
    "        mistakes = 7 \n",
    "\n",
    "        print(\" \".join(board))\n",
    "\n",
    "        guessed = False\n",
    "        while not guessed and mistakes > 0:\n",
    "            guess = input('Guess a letter using latin alphabet: ').lower()\n",
    "            while (guess.isalpha() == False) or len(guess) != 1: #проверка инпута\n",
    "                    print(\"Something is wrong with your input.Use latin letters only, 1 symbol per guess.\")\n",
    "                    guess = input('Guess a letter using latin alphabet: ').lower() \n",
    "            if guess.isalpha() and len(guess) == 1:\n",
    "                    if guess in repetitions:\n",
    "                        print('You have alredy entered this letter. Try some other, there are lots of them.')\n",
    "                    elif guess in guessWord: \n",
    "                        alreadySaid.add(guess)\n",
    "                        board = \"\".join([char if char in alreadySaid else \"-\" for char in guessWord]) #заменяет подчеркивания\n",
    "                        if board == guessWord: #слово угадано\n",
    "                                guessed = True\n",
    "                    else:\n",
    "                        mistakes -= 1\n",
    "                        print(\"Nope.\", mistakes, \"mistakes left.\") \n",
    "                    print(\" \".join(board))   \n",
    "            repetitions.append(guess)\n",
    "                        \n",
    "                \n",
    "        print(\"good job\")\n",
    "        #спрашивает, хочешь ли поиграть еще\n",
    "        again = (input(\"Would you like to go again? Print [yes/no]: \").lower() == 'yes') \n",
    "setup()\n",
    "playing(theme_choice)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
